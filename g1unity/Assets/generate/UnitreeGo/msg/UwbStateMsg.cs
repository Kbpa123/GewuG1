//Do not edit! This file was generated by Unity-ROS MessageGeneration.
using System;
using System.Linq;
using System.Collections.Generic;
using System.Text;
using Unity.Robotics.ROSTCPConnector.MessageGeneration;

namespace RosMessageTypes.UnitreeGo
{
    [Serializable]
    public class UwbStateMsg : Message
    {
        public const string k_RosMessageName = "unitree_go/UwbState";
        public override string RosMessageName => k_RosMessageName;

        public byte[] version;
        public byte channel;
        public byte joy_mode;
        public float orientation_est;
        public float pitch_est;
        public float distance_est;
        public float yaw_est;
        public float tag_roll;
        public float tag_pitch;
        public float tag_yaw;
        public float base_roll;
        public float base_pitch;
        public float base_yaw;
        public float[] joystick;
        public byte error_state;
        public byte buttons;
        public byte enabled_from_app;

        public UwbStateMsg()
        {
            this.version = new byte[2];
            this.channel = 0;
            this.joy_mode = 0;
            this.orientation_est = 0.0f;
            this.pitch_est = 0.0f;
            this.distance_est = 0.0f;
            this.yaw_est = 0.0f;
            this.tag_roll = 0.0f;
            this.tag_pitch = 0.0f;
            this.tag_yaw = 0.0f;
            this.base_roll = 0.0f;
            this.base_pitch = 0.0f;
            this.base_yaw = 0.0f;
            this.joystick = new float[2];
            this.error_state = 0;
            this.buttons = 0;
            this.enabled_from_app = 0;
        }

        public UwbStateMsg(byte[] version, byte channel, byte joy_mode, float orientation_est, float pitch_est, float distance_est, float yaw_est, float tag_roll, float tag_pitch, float tag_yaw, float base_roll, float base_pitch, float base_yaw, float[] joystick, byte error_state, byte buttons, byte enabled_from_app)
        {
            this.version = version;
            this.channel = channel;
            this.joy_mode = joy_mode;
            this.orientation_est = orientation_est;
            this.pitch_est = pitch_est;
            this.distance_est = distance_est;
            this.yaw_est = yaw_est;
            this.tag_roll = tag_roll;
            this.tag_pitch = tag_pitch;
            this.tag_yaw = tag_yaw;
            this.base_roll = base_roll;
            this.base_pitch = base_pitch;
            this.base_yaw = base_yaw;
            this.joystick = joystick;
            this.error_state = error_state;
            this.buttons = buttons;
            this.enabled_from_app = enabled_from_app;
        }

        public static UwbStateMsg Deserialize(MessageDeserializer deserializer) => new UwbStateMsg(deserializer);

        private UwbStateMsg(MessageDeserializer deserializer)
        {
            deserializer.Read(out this.version, sizeof(byte), 2);
            deserializer.Read(out this.channel);
            deserializer.Read(out this.joy_mode);
            deserializer.Read(out this.orientation_est);
            deserializer.Read(out this.pitch_est);
            deserializer.Read(out this.distance_est);
            deserializer.Read(out this.yaw_est);
            deserializer.Read(out this.tag_roll);
            deserializer.Read(out this.tag_pitch);
            deserializer.Read(out this.tag_yaw);
            deserializer.Read(out this.base_roll);
            deserializer.Read(out this.base_pitch);
            deserializer.Read(out this.base_yaw);
            deserializer.Read(out this.joystick, sizeof(float), 2);
            deserializer.Read(out this.error_state);
            deserializer.Read(out this.buttons);
            deserializer.Read(out this.enabled_from_app);
        }

        public override void SerializeTo(MessageSerializer serializer)
        {
            serializer.Write(this.version);
            serializer.Write(this.channel);
            serializer.Write(this.joy_mode);
            serializer.Write(this.orientation_est);
            serializer.Write(this.pitch_est);
            serializer.Write(this.distance_est);
            serializer.Write(this.yaw_est);
            serializer.Write(this.tag_roll);
            serializer.Write(this.tag_pitch);
            serializer.Write(this.tag_yaw);
            serializer.Write(this.base_roll);
            serializer.Write(this.base_pitch);
            serializer.Write(this.base_yaw);
            serializer.Write(this.joystick);
            serializer.Write(this.error_state);
            serializer.Write(this.buttons);
            serializer.Write(this.enabled_from_app);
        }

        public override string ToString()
        {
            return "UwbStateMsg: " +
            "\nversion: " + System.String.Join(", ", version.ToList()) +
            "\nchannel: " + channel.ToString() +
            "\njoy_mode: " + joy_mode.ToString() +
            "\norientation_est: " + orientation_est.ToString() +
            "\npitch_est: " + pitch_est.ToString() +
            "\ndistance_est: " + distance_est.ToString() +
            "\nyaw_est: " + yaw_est.ToString() +
            "\ntag_roll: " + tag_roll.ToString() +
            "\ntag_pitch: " + tag_pitch.ToString() +
            "\ntag_yaw: " + tag_yaw.ToString() +
            "\nbase_roll: " + base_roll.ToString() +
            "\nbase_pitch: " + base_pitch.ToString() +
            "\nbase_yaw: " + base_yaw.ToString() +
            "\njoystick: " + System.String.Join(", ", joystick.ToList()) +
            "\nerror_state: " + error_state.ToString() +
            "\nbuttons: " + buttons.ToString() +
            "\nenabled_from_app: " + enabled_from_app.ToString();
        }

#if UNITY_EDITOR
        [UnityEditor.InitializeOnLoadMethod]
#else
        [UnityEngine.RuntimeInitializeOnLoadMethod]
#endif
        public static void Register()
        {
            MessageRegistry.Register(k_RosMessageName, Deserialize);
        }
    }
}
