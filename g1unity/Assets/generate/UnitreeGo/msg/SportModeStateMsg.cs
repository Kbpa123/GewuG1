//Do not edit! This file was generated by Unity-ROS MessageGeneration.
using System;
using System.Linq;
using System.Collections.Generic;
using System.Text;
using Unity.Robotics.ROSTCPConnector.MessageGeneration;

namespace RosMessageTypes.UnitreeGo
{
    [Serializable]
    public class SportModeStateMsg : Message
    {
        public const string k_RosMessageName = "unitree_go/SportModeState";
        public override string RosMessageName => k_RosMessageName;

        public TimeSpecMsg stamp;
        public uint error_code;
        public IMUStateMsg imu_state;
        public byte mode;
        public float progress;
        public byte gait_type;
        public float foot_raise_height;
        public float[] position;
        public float body_height;
        public float[] velocity;
        public float yaw_speed;
        public float[] range_obstacle;
        public short[] foot_force;
        public float[] foot_position_body;
        public float[] foot_speed_body;

        public SportModeStateMsg()
        {
            this.stamp = new TimeSpecMsg();
            this.error_code = 0;
            this.imu_state = new IMUStateMsg();
            this.mode = 0;
            this.progress = 0.0f;
            this.gait_type = 0;
            this.foot_raise_height = 0.0f;
            this.position = new float[3];
            this.body_height = 0.0f;
            this.velocity = new float[3];
            this.yaw_speed = 0.0f;
            this.range_obstacle = new float[4];
            this.foot_force = new short[4];
            this.foot_position_body = new float[12];
            this.foot_speed_body = new float[12];
        }

        public SportModeStateMsg(TimeSpecMsg stamp, uint error_code, IMUStateMsg imu_state, byte mode, float progress, byte gait_type, float foot_raise_height, float[] position, float body_height, float[] velocity, float yaw_speed, float[] range_obstacle, short[] foot_force, float[] foot_position_body, float[] foot_speed_body)
        {
            this.stamp = stamp;
            this.error_code = error_code;
            this.imu_state = imu_state;
            this.mode = mode;
            this.progress = progress;
            this.gait_type = gait_type;
            this.foot_raise_height = foot_raise_height;
            this.position = position;
            this.body_height = body_height;
            this.velocity = velocity;
            this.yaw_speed = yaw_speed;
            this.range_obstacle = range_obstacle;
            this.foot_force = foot_force;
            this.foot_position_body = foot_position_body;
            this.foot_speed_body = foot_speed_body;
        }

        public static SportModeStateMsg Deserialize(MessageDeserializer deserializer) => new SportModeStateMsg(deserializer);

        private SportModeStateMsg(MessageDeserializer deserializer)
        {
            this.stamp = TimeSpecMsg.Deserialize(deserializer);
            deserializer.Read(out this.error_code);
            this.imu_state = IMUStateMsg.Deserialize(deserializer);
            deserializer.Read(out this.mode);
            deserializer.Read(out this.progress);
            deserializer.Read(out this.gait_type);
            deserializer.Read(out this.foot_raise_height);
            deserializer.Read(out this.position, sizeof(float), 3);
            deserializer.Read(out this.body_height);
            deserializer.Read(out this.velocity, sizeof(float), 3);
            deserializer.Read(out this.yaw_speed);
            deserializer.Read(out this.range_obstacle, sizeof(float), 4);
            deserializer.Read(out this.foot_force, sizeof(short), 4);
            deserializer.Read(out this.foot_position_body, sizeof(float), 12);
            deserializer.Read(out this.foot_speed_body, sizeof(float), 12);
        }

        public override void SerializeTo(MessageSerializer serializer)
        {
            serializer.Write(this.stamp);
            serializer.Write(this.error_code);
            serializer.Write(this.imu_state);
            serializer.Write(this.mode);
            serializer.Write(this.progress);
            serializer.Write(this.gait_type);
            serializer.Write(this.foot_raise_height);
            serializer.Write(this.position);
            serializer.Write(this.body_height);
            serializer.Write(this.velocity);
            serializer.Write(this.yaw_speed);
            serializer.Write(this.range_obstacle);
            serializer.Write(this.foot_force);
            serializer.Write(this.foot_position_body);
            serializer.Write(this.foot_speed_body);
        }

        public override string ToString()
        {
            return "SportModeStateMsg: " +
            "\nstamp: " + stamp.ToString() +
            "\nerror_code: " + error_code.ToString() +
            "\nimu_state: " + imu_state.ToString() +
            "\nmode: " + mode.ToString() +
            "\nprogress: " + progress.ToString() +
            "\ngait_type: " + gait_type.ToString() +
            "\nfoot_raise_height: " + foot_raise_height.ToString() +
            "\nposition: " + System.String.Join(", ", position.ToList()) +
            "\nbody_height: " + body_height.ToString() +
            "\nvelocity: " + System.String.Join(", ", velocity.ToList()) +
            "\nyaw_speed: " + yaw_speed.ToString() +
            "\nrange_obstacle: " + System.String.Join(", ", range_obstacle.ToList()) +
            "\nfoot_force: " + System.String.Join(", ", foot_force.ToList()) +
            "\nfoot_position_body: " + System.String.Join(", ", foot_position_body.ToList()) +
            "\nfoot_speed_body: " + System.String.Join(", ", foot_speed_body.ToList());
        }

#if UNITY_EDITOR
        [UnityEditor.InitializeOnLoadMethod]
#else
        [UnityEngine.RuntimeInitializeOnLoadMethod]
#endif
        public static void Register()
        {
            MessageRegistry.Register(k_RosMessageName, Deserialize);
        }
    }
}
